openapi: 3.0.3
info:
  title: Backend API example
  description: Backend API example API declaration
  termsOfService: http://swagger.io/terms/
  contact:
    email: losikov@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.7
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: /api/v1
 
tags:
  - name: greeting
    description: Greeting APIs
 
paths:
  /hello:
    get:
      description: Returns 'Hello <name>/stranger!!!' to the caller
      tags: 
        - greeting
      operationId: hello
      parameters:
      - name: name
        required: false
        in: query
        description: The name of a caller
        schema:
          type: string
      "responses":
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
  /goodbye:
    get:
      description: Returns 'Goodbye \<name\>!!!' to the authenticated caller
      tags: 
        - greeting
      operationId: goodbye
      security: 
        - bearerAuth: []
      "responses":
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
  /users/{id}:
    patch:
      summary: update user
      description: Returns 'I am here!' to the authenticated caller
      tags: 
        - greeting
      operationId: updateUser
      parameters:
        - name: id
          required: true
          in: path
          description: id of user
          schema:
            type: string
      security: 
        - bearerAuth: []
      "responses":
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: fetch user
      description: Returns 'I am here!' to the authenticated caller
      tags: 
        - greeting
      operationId: fetchUser
      parameters:
        - name: id
          required: true
          in: path
          description: id of user
          schema:
            type: string
      security: 
        - bearerAuth: []
      "responses":
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: create user
      description: Returns 'I am here!' to the authenticated caller
      tags: 
        - greeting
      operationId: createUser
      parameters:
        - name: id
          required: true
          in: path
          description: id of user
          schema:
            type: string
      security: 
        - bearerAuth: []
      "responses":
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    delete:
      summary: delete user
      description: Returns 'I am here!' to the authenticated caller
      tags: 
        - greeting
      operationId: deleteUser
      parameters:
        - name: id
          required: true
          in: path
          description: id of user
          schema:
            type: string
      security: 
        - bearerAuth: []
      "responses":
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
  /operations:
    patch:
      description: Returns first operation result
      summary: operation 1
      tags: 
        - greeting
      operationId: operation 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operation'
            example:
              operation: operation 1
      security: 
        - bearerAuth: []
      "responses":
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    HelloResponse:
      type: object
      additionalProperties: false
      required:
        - message
      properties:
        message:
          type: string
    Operation:
      type: object
      additionalProperties: false
      required:
        - operation
      properties:
        operation:
          type: string